%include "sconst.inc"
        extern display_position

        global disp_str
        global disp_color_str
        global out_byte
        global in_byte
        global port_read
        global port_write
        global disable_irq
        global enable_irq
        global disable_int
        global enable_int
;;; void disable_int();
disable_int:
        cli
        ret
;;; void enable_int();
enable_int:
        sti
        ret
;;; void disable_irq(u32 irq)
disable_irq:
        mov ecx,[esp+4]
        pushf                   ;push eflags
        cli
        mov ah,1
        rol ah,cl               ;ah=(1<<(irq%8))
        cmp cl,8
        jae disable_8
disable_0:
        in al,INT_M_CTLMASK
        test al,ah
        jnz dis_already
        or al,ah
        out INT_M_CTLMASK,al
        popf
        mov eax,1               ;返回值
        ret
disable_8:
        in al,INT_S_CTLMASK
        test al,ah
        jnz dis_already
        or al,ah
        out INT_S_CTLMASK,al
        popf
        mov eax,1               ;返回值
        ret
dis_already:
        popf
        xor eax,eax
        ret

;;; void enable_irq(u32 irq)
enable_irq:
        mov ecx,[esp+4]
        pushf                   ;push eflags
        cli
        mov ah,~1
        rol ah,cl               ;ah=~(1<<(irq%8))
        cmp cl,8
        jae enable_8
enable_0:
        in al,INT_M_CTLMASK
        and al,ah
        out INT_M_CTLMASK,al
        popf
        ret
enable_8:
        in al,INT_S_CTLMASK
        and al,ah
        out INT_S_CTLMASK,al
        popf
        ret
        
;;; void out_byte(u16 port,u8 value)
out_byte:
        mov edx,[esp+4]
        mov al,byte[esp+4+4]
        out dx,al
  
        nop
        nop      
        ret
        
;;; u8 in_byte(u16 port)
in_byte:
        mov edx,[esp+4]
        xor eax,eax
        in al,dx
        nop
        nop
        ret

;; void port_read(u16 port,char *buf,int length);
port_read:
        push ebp
        mov ebp,esp
        push ecx
        push edi
        push edx
        
        mov edx,[ebp+4+4]       ;port
        mov edi,[ebp+4+8]       ;buf
        mov ecx,[ebp+4+12]      ;length
        shr ecx,1               ;the time of repeation
        cld                     ;clear direction(d=0:auto-inc 2 bytes,or auto-dec 2 bytes)

        rep insw                ;read 2 bytes once

        pop edx
        pop edi
        pop ecx
        pop ebp
        
        ret
        
;; void port_write(u16 port,char *buf,int length) ;
port_write:
        push ebp
        mov ebp,esp
        push ecx
        push edx
        push esi
        
        mov edx,[ebp+4+4]
        mov esi,[esp+4+8]
        mov ecx,[esp+4+12]
        shr ecx,1
        cld

        rep outsw

        pop esi
        pop edx
        pop ecx
        pop ebp
        ret
        
;;; void disp_str(char *p_str)
disp_str:
        push ebp
        mov ebp,esp
        push ebx
        push edx
        push edi
        push esi

        
        mov esi,[ebp+8]
        mov edi,[display_position]
        mov ah,0Fh

.1:
        lodsb                   ;al=[ds:esi],esi自增
        test al,al
        jz .2
        cmp al,0Ah
        jnz .3
        push eax

        mov eax,edi             ;之前掉了此句，使得是字符串无法正常现实
        mov bl,160
        div bl
        and eax,0FFh
        inc eax
        mov bl,160
        mul bl
        mov edi,eax
        
        pop eax
        jmp .1
.3:
        mov [gs:edi],ax
        add edi,2
        jmp .1

.2:
        mov [display_position],edi

        pop esi
        pop edi
        pop edx
        pop ebx
        pop ebp
        ret
        
disp_color_str:
        push ebp
        mov ebp,esp
        push ebx
        push edx
        push edi
        push esi

        mov esi,[ebp+8]
        mov edi,[display_position]
        mov ah,[ebp+12]

.1:
        lodsb                   ;al=[ds:esi],esi自增
        test al,al
        jz .2
        cmp al,0Ah
        jnz .3
        push eax

        mov eax,edi             ;之前掉了此句，使得是字符串无法正常现实
        mov bl,160
        div bl
        and eax,0FFh
        inc eax
        mov bl,160
        mul bl
        mov edi,eax
        
        pop eax
        jmp .1
.3:
        mov [gs:edi],ax
        add edi,2
        jmp .1

.2:
        mov [display_position],edi

        pop esi
        pop edi
        pop edx
        pop ebx
        pop ebp
        ret
